// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
 provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Tabel User
model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String    @unique
  password       String
  userType       String?   @default("KARYAWAN")

  accounts       Account[]
  sessions       Session[]

  // relasi
  transaksi  Transaksi[]  @relation("TransaksiUser")
  produk      Produk[]
}

// Tabel Pengaturan toko
model Pengaturan {
  id           Int    @id
  nama_toko    String
  tarif_ppn    Decimal
  alamat_toko  String
  npwp_toko    String?
  siup_toko    String?
  notelp_toko  String?
  email_toko   String?

  updatedAt    DateTime   @updatedAt
}

model Pengiriman {
  id          Int      @id @default(autoincrement())
  nama        String
  tarif       Int

  updatedAt   DateTime  @updatedAt
}

// Tabel Jurnal
model Jurnal {
  id           Int      @id @default(autoincrement())
  kode         String
  akun         String
  transaksiId  Int?
  pembelianId  Int?
  debit        Int?
  kredit       Int?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // relasi
  pembelian   Pembelian?   @relation(fields: [pembelianId], references: [id])
  transaksi   Transaksi?   @relation(fields: [transaksiId], references: [id])

}

// Tabel Kategori
model Kategori {
  id            Int       @id @default(autoincrement())
  nama          String
  status        String    @default("AKTIF")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  produk        Produk[]
}

// tabel pelanggan
model Pelanggan {
  id            Int       @id @default(autoincrement())
  nama          String
  alamat        String?
  notelp        String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  transaksi  Transaksi[] @relation("TransaksiPelanggan")
}

// Tabel Distributor
model Distributor {
  id            Int       @id @default(autoincrement())
  nama          String
  notelp        String?
  alamat        String?
  email         String

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // relasi
  pembelian     Pembelian[]
}

// Tabel Pembelian Return
model ReturnPembelian {
  id            Int       @id  @default(autoincrement())
  pembelianId   Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  pembelian     Pembelian @relation(fields: [pembelianId], references: [id])
  returndetail  ReturnDetail[]
}

// Tabel Detail pembelian return
model ReturnDetail {
  id            Int       @id   @default(autoincrement())
  returnId      Int
  produkId      Int
  jumlahreturn  Int

  // relasi
  return        ReturnPembelian    @relation(fields: [returnId], references: [id])
}

// Tabel Pembelian
model Pembelian {
  id            Int       @id @default(autoincrement())
  kode          String    @unique
  status        String?
  biayakirim    Int?
  distributorId Int
  jumlahtotalharga    Int

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  pembelianbermasalah PembelianBermasalah[]
  pembeliandetail PembelianDetail[]
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  jurnal        Jurnal[]
  kedatangan    Kedatangan[]
  return        ReturnPembelian[]
}

// Tabel Detail Pembelian
model PembelianDetail {
  id            Int      @id  @default(autoincrement())
  pembelianId   Int
  produkId      Int
  jumlah        Int
  hargabeli     Int
  total         Int

  // relasi
  pembelian     Pembelian @relation(fields: [pembelianId], references: [id])
  produk        Produk    @relation(fields: [produkId], references: [id])

}

// Tabel Pembelian Bermasalah (produk kurang)
model PembelianBermasalah {
  id            Int      @id  @default(autoincrement())
  pembelianId   Int
  kodepembelian String?
  status        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  pembelian         Pembelian   @relation(fields: [pembelianId], references: [id])
  detailbermasalah  DetailBermasalah[]

}

// Tabel Detail pembelian bermasalah
model DetailBermasalah {
  id            Int       @id @default(autoincrement())
  pembelianbermasalahId   Int
  produkId      Int
  jumlahpesanan Int
  jumlahkedatangan Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  pembelianbermasalah PembelianBermasalah @relation(fields: [pembelianbermasalahId], references: [id])
  produk        Produk  @relation(fields: [produkId], references: [id])

}

// Tabel kedatangan pembelian
model Kedatangan {
  id            Int       @id @default(autoincrement())
  pembelianId   Int
  kodepembelian String
  status        String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // relasi
  kedatangandetail  KedatanganDetail[]
  pembelian     Pembelian   @relation(fields: [pembelianId], references: [id])

}

// Tabel Detail kedatangan
model KedatanganDetail {
  id            Int       @id @default(autoincrement())
  kedatanganId  Int
  produkId      Int
  jumlahpesanan Int
  jumlahkedatangan Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  kedatangan    Kedatangan  @relation(fields: [kedatanganId], references: [id])
  produk        Produk    @relation(fields: [produkId], references: [id])
}

enum jenis_p {
  BARANG
  PANGAN
}

// Tabel produk
model Produk {
  id            Int       @id @default(autoincrement())
  userId        Int
  barcode       String?
  nama          String
  stok          Int?      @default(0)
  satuan        String    @default("pcs")
  harga         Int
  hargabeli     Int?
  kategoriId    Int
  jenis         jenis_p   @default(BARANG)
  kadaluarsa    DateTime?
  status        String    @default("AKTIF")
  keterangan    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // relasi
  kedatangandetail  KedatanganDetail[]
  transaksi TransaksiDetail[]
  userproduk      User    @relation(fields: [userId], references: [id])
  kategori  Kategori  @relation(fields: [kategoriId], references: [id])
  pembelian PembelianDetail[]
  detailbermasalah DetailBermasalah[]
}

// Tabel detail transaksi
model TransaksiDetail {
  id            Int        @id @default(autoincrement())
  transaksiId   Int
  produkId      Int
  jumlah        Int
  harga         Int
  total         Int        @default(0) // total = quantity * price

  // relasi
  transaksi     Transaksi  @relation(fields: [transaksiId], references: [id])
  produk        Produk     @relation(fields: [produkId], references: [id])
}

// Tabel Transaksi (penjualan)
model Transaksi {
  id             Int              @id @default(autoincrement())
  kode           String           @unique
  status         String
  userId         Int
  pelangganId    Int?
  namapelanggan  String?
  metode         String
  jumlahTotal    Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // relasi
  user           User             @relation("TransaksiUser", fields: [userId], references: [id])
  pelanggan      Pelanggan?       @relation("TransaksiPelanggan", fields: [pelangganId], references: [id])
  transaksidetail  TransaksiDetail[]
  jurnal          Jurnal[]

}

// Tabel Akun (session)
model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  // relasi
  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

// Tabel Session
model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}


