// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
 provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String    @unique
  password       String
  userType       String?   @default("KARYAWAN")

  accounts       Account[]
  sessions       Session[]

  transaksi  Transaksi[]  @relation("TransaksiUser")
  produk      Produk[]
  kedatangan  Kedatangan[]
}

model JurnalTransaksi {
  id            Int      @id  @default(autoincrement())
  transaksiId   Int
  kode          String
  pemasukan     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transaksi     Transaksi @relation(fields: [transaksiId], references: [id])
}

model JurnalPembelian {
  id            Int       @id @default(autoincrement())
  pembelianId   Int
  kode          String
  pengeluaran   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  pembelian     Pembelian @relation(fields: [pembelianId], references: [id])


}

model Kategori {
  id            Int       @id @default(autoincrement())
  nama          String
  status        String    @default("AKTIF")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  produk        Produk[]
}

model Pelanggan {
  id            Int       @id @default(autoincrement())
  nama          String
  alamat        String?
  notelp        String?
  email         String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transaksi  Transaksi[] @relation("TransaksiPelanggan")
}

model Distributor {
  id            Int       @id @default(autoincrement())
  nama          String
  notelp        String?
  alamat        String?
  email         String

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  pembelian     Pembelian[]
}

model Pembelian {
  id            Int       @id @default(autoincrement())
  kode          String    @unique
  status        String?
  distributorId Int
  jumlahtotalharga    Int

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  pembeliandetail PembelianDetail[]
  distributor   Distributor @relation(fields: [distributorId], references: [id])
  jurnalpembelian   JurnalPembelian[]
}

model PembelianDetail {
  id            Int      @id  @default(autoincrement())
  pembelianId   Int
  produkId      Int
  jumlah        Int
  hargabeli     Int
  total         Int

  kedatangan    Kedatangan[]
  pembelian     Pembelian @relation(fields: [pembelianId], references: [id])
  produk        Produk    @relation(fields: [produkId], references: [id])

}

model Kedatangan {
  id                Int               @id @default(autoincrement())
  pembeliandetailId Int
  tanggalkedatangan DateTime          @default(now())
  jumlahproduk      Int
  status            String            @default("pending")
  receivedBy        Int?
  notes             String?

  pembelian         PembelianDetail   @relation(fields: [pembeliandetailId], references: [id])
  user              User?             @relation(fields: [receivedBy], references: [id])
}

enum jenis_p {
  BARANG
  PANGAN
}

model Produk {
  id            Int       @id @default(autoincrement())
  userId        Int
  barcode       String?
  nama          String
  stok          Int?      @default(0)
  satuan        String    @default("pcs")
  harga         Int
  hargabeli     Int?
  kategoriId    Int
  jenis         jenis_p   @default(BARANG)
  kadaluarsa    DateTime?
  status        String    @default("AKTIF")
  keterangan    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  transaksi TransaksiDetail[]
  userproduk      User    @relation(fields: [userId], references: [id])
  kategori  Kategori  @relation(fields: [kategoriId], references: [id])
  pembelian PembelianDetail[]
}

model TransaksiDetail {
  id            Int        @id @default(autoincrement())
  transaksiId   Int
  produkId      Int
  jumlah        Int
  harga         Int
  total         Int        @default(0) // total = quantity * price

  transaksi     Transaksi  @relation(fields: [transaksiId], references: [id])
  produk        Produk     @relation(fields: [produkId], references: [id])
}

model Transaksi {
  id             Int              @id @default(autoincrement())
  kode           String           @unique
  status         String
  userId         Int
  pelangganId    Int?
  namapelanggan  String?
  jumlahTotal    Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  user           User             @relation("TransaksiUser", fields: [userId], references: [id])
  pelanggan      Pelanggan?       @relation("TransaksiPelanggan", fields: [pelangganId], references: [id])
  transaksidetail  TransaksiDetail[]
  jurnaltransaksi  JurnalTransaksi[]

}

model Account {
  id                Int       @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime

  user         User      @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String    @unique
  expires    DateTime

  @@unique([identifier, token])
}


